
Make_pl - Very portable build system in Perl
https://github.com/quietfanatic/make-pl

Installation:
  Just grab Make_pl.pm and stuff it in your project directory.
  This has no dependencies besides Perl >= 5.10 and its core modules.
  (I suppose if you want you can put this in some library directory with all
  your other DarkPAN modules, but that will reduce your project's portability.)

Usage:
  To run a make.pl:
    - ./make.pl <targets>
  To generate a bare-bones make.pl:
    - perl Make_pl.pm <directory (defaults to .)>

Quick Reference:
  workflow { <rules and stuff> };
    - Put all your rules and stuff in here.
  rule <targets>, <dependencies>, <routine>;
    - Defines a compilation rule like in a Makefile.
       - <targets> can be a single filename or an array ref of filenames.
       - <dependencies> can be a single filename, an array ref of filenames,
          or a subroutine which returns filenames.
       - The compile routine (the last argument) is given two array refs as
          arguments containing the targets and the dependencies.
  phony <targets>, <dependencies>, <routine>;
    - like rule, but the target(s) do not correspond to actual files
  subdep <targets>, <dependencies>;
    - Establishes that anything that depends on the target(s) also depends
       on the given dependencies, e.g. because of an #include statement.
  subdep <routine>;
    - Provides a way to automatically deduce subdeps.  The routine will be
       called with a filename and is expected to return some more filenames.
       See "sample_make.pl" in this repo for a function that'll to scan C/C++
       files for #include statements.
  defaults <targets...>;
    - With no arguments, make.pl will build these targets.  The default
       default is to run the first rule given in the workflow.
  include <filenames...>;
    - Include the targets and rules in another make.pl.  Relative filenames,
       working directories, etc. all do The Right Thing.  Cyclical includes
       are fine.
  option <name>, <routine>, <description?>;
    - Allows an option to be specified on the command line, like "--<name>" or
       "--<name>=<value>".  <routine> can be a code ref, which will be called
       with <value> when the option is provided, or a scalar ref, which will
       be set to <value> when the option is provided.  The optional one-line
       description will be printed in the "--help" message.  The description
       should start with "--<name>".
  chdir <directory>;
    - Reexport of Cwd::chdir.
  targetmatch <regex>;
    - Returns all defined targets whose absolute filenames match the regex.
  run <command>;
    - Like the builtin system(), but aborts the build process if the command
       gives a non-zero exit status.

Working Directories:
  Make_pl tries to make working directories a lexical concept, so that things
  just work how you expect them to.
    - All relative filenames given to the API are relative to the current
       working directory.
    - At the beginning of a workflow { } block, the working directory is always
       the same directory that the make.pl is in, no matter where you invoked
       it from.
    - All routines passed to a rule will be run in the same working
       directory that the rule was defined in.
    - If you must chdir, don't use CORE::chdir or some other module's chdir
       that doesn't update Cwd::cwd.
    - Even if one make.pl includes another make.pl, each uses filenames
       relative to its own directory.  That is, if ./make.pl says
       "modules/cake/lime" and modules/cake/make.pl says "lime", they are
       talking about the same file.
    - Filenames given on the command line are relative to the current working
       directory of the command line, not of the make.pl.

Recommendations:
  - It's best to die if something fails.  The autodie pragma is recommended.
  - A basic knowledge of Perl is recommended.  Knowledge of make and Makefiles
     is not required, but knowledge of why people use them is.
  - If your program is large and has good modularity, do take advantage of the
     include functionality.  If two make.pl files mutually include one another,
     you can invoke either one to do stuff; the following commands would be
     equivalent:
       $ ./make.pl modules/cake/lime
       $ modules/cake/make.pl modules/cake/lime
       $ cd modules/cake; ./make.pl lime
     This does cause one counterintuitive effect.  If you want to use a phony
     target belonging to a make.pl in a different directory, you must prefix
     the phony target with that directory (as if it's actually a file).
       $ modules/cake/make.pl clean  # oops, this cleans the whole project
       $ modules/cake/make.pl modules/cake/clean  # just clean the cake
       $ ./make.pl modules/cake/clean  # this works too
  - After the previous point it goes without saying, but you can invoke a
     make.pl from any directory, not just the one it's in, provided the make.pl
     is correctly formed.  To make sure your make.pl can be run anywhere, put
     this at the top:
       use FindBin;
       use if !$^S, lib => "$FindBin::Bin/<directory containing Make_pl.pm>";
       use Make_pl;
     If you used 'perl Make_pl.pm' to generate a make.pl, it'll have done this
     for you.
  - Because your build script is in a real programming language and not a DSL,
     you can actually do real abstraction.  Take a look at "sample_make.pl"
     to see how.

